<div class="container">

  <div class="row">
    <div class="col-xs-8">
    <h1>Live for <%= @session.title %></h1>
      <p>video</p>
      <div id="video"></div>
      <div id="connection_button" class="btn btn-success"></div>
      <div id="current_user_id" class="btn btn-primary"><%= @user_id %></div>
      <div id="tutor_id" class="btn btn-primary"><%= @tutor_id %></div>
    </div>

    <div class="col-xs-4">
      <div class="chat-header"><h4>#<%= @chatroom.session.title %></h4></div>
      <div class="messages">
        <% @chatroom.messages.each do |message| %>
          <%= render "messages/message", message: message, user_is_messages_author: message.from?(current_user), c_user: current_user %>
        <% end %>
      </div>
      <div id="create-message">
        <%= simple_form_for [ @chatroom, Message.new ], remote: true, html: {autocomplete: "off" } do |f| %>
          <%= f.input :body, label: false %>
        <% end %>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-xs-12">
      <h4>Resources</h4>
      <ul>
        <li><%= link_to "Slides", "#" %></li>
        <li><%= link_to "Exercises", "#" %></li>
      </ul>
    </div>
  </div>
</div>






<%= content_for :after_js do %>
  <!-- <script>
    scrollLastMessageIntoView();
    console.log('123');

    App['chatroom_<%#= @chatroom.id %>'] = App.cable.subscriptions.create({ channel: 'ChatroomsChannel', chatroom_id: <%#= @chatroom.id %> }, {
      received: (data) => {
        console.log('543221');
        // if (data.current_user_id !== <%#current_user.id %>) {
           if (data.c_user !== <%#= current_user.id %>) {
          const messagesContainer = document.querySelector('.messages');
          messagesContainer.insertAdjacentHTML('beforeend', data.message_partial);
          scrollLastMessageIntoView();
        }
      }
    })
  </script>
 -->

  <script>
    function trackAdded(div, identity, track) {
      div.appendChild(track.attach());
    }
    function trackRemoved(track) {
      track.detach().forEach(element => element.remove());
    }

    function participantConnected(participant) {
      console.log('Participant "%s" connected', participant.identity);

      const tutorVideo = document.getElementById('video');

      participant.on('trackAdded', track => trackAdded(tutorVideo, participant.identity, track));
      participant.tracks.forEach(track => trackAdded(tutorVideo, participant.identity, track));
      participant.on('trackRemoved', trackRemoved);
    }
    function participantDisconnected(participant) {
      console.log('Participant "%s" disconnected', participant.identity);

      participant.tracks.forEach(trackRemoved);
      // document.getElementById(participant.sid).remove();
    }


    const streaming = () => {

      const current_user = document.getElementById('current_user_id').innerHTML;
      const session_tutor = document.getElementById('tutor_id').innerHTML;

      if (current_user === session_tutor){
        console.log('this is a match ! You are the tutor of this session');
      }else{
        console.log('You are a student');
      };

      Twilio.Video.connect('<%= @token.to_jwt %>', { audio: true, name: 'alex-room', video: { width: 640 }}).then(room => {
        console.log('Connected to Room "%s"', room.name);

        room.participants.forEach(participantConnected);
        room.on('participantConnected', participantConnected);
        room.on('participantDisconnected', participantDisconnected);
        room.once('disconnected', error => room.participants.forEach(participantDisconnected));
      });
    }

    const bouton = document.getElementById('connection_button');
    bouton.addEventListener('click', streaming );
  </script>
<% end %>
