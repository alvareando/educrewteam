<div class="container">
  <div class="row">
    <div class="col-xs-8">
      <h1>Live for <%= @session.title %></h1>
      <span>You are <%= @session.tutor == current_user ? 'the tutor' : 'a student' %></span>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-xs-8">
      <div id="tutor_video" class="" style="background-image: linear-gradient(rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url(<%= image_path('cover.png') %>); display: none;"></div>
      <div id="student_video" class="" style="background-image: linear-gradient(rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) ), url(<%= image_path('cover.png') %>)">
        <%= link_to 'Join live session', '#', id: 'connection_button', class: 'btn btn-success', data: { disable_with: "<i class='fa fa-spinner fa-spin'></i> Joining..." } %>
      </div>
      <div id="preview_camera"></div>
      <%#= link_to 'Join live session', '#', id: 'connection_button', class: 'btn btn-success', data: { disable_with: "<i class='fa fa-spinner fa-spin'></i> Joining..." } %>
      <div id="current_user_id" style="display: none"><%= @user_id %></div>
      <div id="tutor_id" style="display: none"><%= @tutor_id %></div>
    </div>
    <div class="col-xs-4">
      <div class="chat-header"><h4><%= @chatroom.session.title %></h4></div>
      <div class="messages">
        <% @chatroom.messages.each do |message| %>
          <%= render "messages/message", message: message, user_is_messages_author: message.from?(current_user), c_user: current_user %>
        <% end %>
      </div>
      <div id="create-message">
        <%= simple_form_for [ @chatroom, Message.new ], remote: true, html: {autocomplete: "off" } do |f| %>
          <%= f.input :body, label: false %>
        <% end %>
      </div>
    </div>
  </div>
</div>

<%= content_for :after_js do %>
  <script src="//media.twiliocdn.com/sdk/js/video/v1/twilio-video.min.js"></script>


  <script>
    const current_user = document.getElementById('current_user_id').innerHTML;
    const session_tutor = document.getElementById('tutor_id').innerHTML;

    function trackAdded(div, identity, track) {
      console.log(track);

      console.log(identity);

      // remove green join button
      var startBtn = document.getElementById('connection_button');
      if (startBtn !== null) {
        startBtn.remove()
      }

      if (current_user === session_tutor){
        let temporary = track.attach();
        div.appendChild(temporary);
        // temporary.classList.add('col-xs-4');
      } else if (identity === session_tutor){
        let temporary = track.attach();
        div.appendChild(temporary);
      };
    }
    function trackRemoved(track) {
      track.detach().forEach(element => element.remove());
    }

    function participantConnected(participant) {
      console.log('Participant "%s" connected', participant.identity);

      const tutorVideo = document.getElementById('tutor_video');
      const studentVideo = document.getElementById('student_video');

      if (current_user === session_tutor){
        participant.on('trackAdded', track => trackAdded(tutorVideo, participant.identity, track));
        participant.tracks.forEach(track => trackAdded(tutorVideo, participant.identity, track));
        studentVideo.style.display = 'none';
        tutorVideo.style.display = 'block';
        // const { createLocalVideoTrack } = require('twilio-video');
        // createLocalVideoTrack().then(track => {
        //   const localMediaContainer = document.getElementById('preview_camera');
        //   localMediaContainer.appendChild(track.attach());
        // });
      } else{
        participant.on('trackAdded', track => trackAdded(studentVideo, participant.identity, track));
        participant.tracks.forEach(track => trackAdded(studentVideo, participant.identity, track));
        tutorVideo.style.display = 'none';
        studentVideo.style.display = 'block';
        // const { createLocalVideoTrack } = require('twilio-video');
        // createLocalVideoTrack().then(track => {
        //   const localMediaContainer = document.getElementById('preview_camera');
        //   localMediaContainer.appendChild(track.attach());
        // });
      };
      participant.on('trackRemoved', trackRemoved);
    }
    function participantDisconnected(participant) {
      console.log('Participant "%s" disconnected', participant.identity);

      participant.tracks.forEach(trackRemoved);
      // document.getElementById(participant.sid).remove();
    }


    const streaming = () => {
      const current_user = document.getElementById('current_user_id').innerHTML;
      const session_tutor = document.getElementById('tutor_id').innerHTML;

      if (current_user === session_tutor){
        console.log('this is a match ! You are the tutor of this session');
      }else{
        console.log('You are a student');
      };

      if (current_user === session_tutor){
        Twilio.Video.connect('<%= @token.to_jwt %>', { audio: true, name: '<%= @session.id %>', video: { width: 640 }}).then(room => {
          console.log('tutor?');
          console.log('Connected to Room "%s"', room.name);

          room.participants.forEach(participantConnected);
          room.on('participantConnected', participantConnected);
          room.on('participantDisconnected', participantDisconnected);
          room.once('disconnected', error => room.participants.forEach(participantDisconnected));
        });
      }else{
        console.log('student?');
        Twilio.Video.connect('<%= @token.to_jwt %>', { audio: true, name: '<%= @session.id %>', video: { width: 250 }}).then(room => {
          console.log('Connected to Room "%s"', room.name);

          room.participants.forEach(participantConnected);
          room.on('participantConnected', participantConnected);
          room.on('participantDisconnected', participantDisconnected);
          room.once('disconnected', error => room.participants.forEach(participantDisconnected));
        });
      };
    }

    const bouton = document.getElementById('connection_button');
    bouton.addEventListener('click', streaming );
  </script>


  <script>
    function focusOnWrittingMessage() {
      const message_to_send = document.getElementById('message_body');
      message_to_send.focus();
    }
    focusOnWrittingMessage();
    scrollLastMessageIntoView();

    App['chatroom_<%= @chatroom.id %>'] = App.cable.subscriptions.create(
      { channel: 'ChatroomsChannel', chatroom_id: <%= @chatroom.id %> },
      {
        received: (data) => {
          if (data.sender !== <%= current_user.id %>) {
            const messagesContainer = document.querySelector('.messages');
            messagesContainer.insertAdjacentHTML('beforeend', data.message_partial);
            scrollLastMessageIntoView();
          }
        }
      }
    )
  </script>
<% end %>
























